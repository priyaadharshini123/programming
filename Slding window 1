Given an array of integers and a number K. Find the count of distinct elements in every window of size K in the array.

Input Format

N = 7, K = 4

A[] = {1,2,1,3,4,2,3}

Window 1 of size k = 4 is 1 2 1 3. Number of distinct elements in this window are 3.

Window 2 of size k = 4 is 2 1 3 4. Number of distinct elements in this window are 4.

Window 3 of size k = 4 is 1 3 4 2. Number of distinct elements in this window are 4.

Window 4 of size k = 4 is 3 4 2 3. Number of distinct elements in this window are 3.

Constraints

1 <= K <= N <= 105

1 <= A[i] <= 105 , for each valid i

Output Format

3 4 4 3

Sample Input 0

7 4
1 2 1 3 4 2 3
Sample Output 0

3 4 4 3
Sample Input 1

3 2
4 1 1
Sample Output 1

2 1

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include<unordered_map>
using namespace std;
void countDistinctInWindow(vector<int>& arr, int k) {
    unordered_map<int, int> freq;
    int n = arr.size();

    // First window
    for (int i = 0; i < k; ++i) {
        freq[arr[i]]++;
    }
    cout << freq.size() << " ";

    // Sliding the window
    for (int i = k; i < n; ++i) {
        // Remove the element going out
        freq[arr[i - k]]--;
        if (freq[arr[i - k]] == 0) {
            freq.erase(arr[i - k]);
        }

        // Add the new element
        freq[arr[i]]++;

        // Print count of distinct elements in current window
        cout << freq.size() << " ";
    }
    cout << endl;
    }

int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
     int n, k;
    cin >> n >> k;
    vector<int> arr(n);

    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }

    countDistinctInWindow(arr, k);

    return 0;
}
