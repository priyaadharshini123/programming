Given a linked list consisting of L nodes and given a number N. The task is to find the Nth node from the end of the linked list. If n is beyond the total number of nodes then return -1.

Note: Create the linked list provided the numbers.

Input Format

N = 9

K = 2

LinkedList: 1->2->3->4->5->6->7->8->9

There are 9 nodes in linked list and we need to find 2nd node from end. 2nd node from end is 8.

Constraints

1 <= L <= 106

1 <= N <= 106

Output Format

8

Sample Input 0

4 5 
10 5 100 5
Sample Output 0

-1
Sample Input 1

6 3 
89 78 9 0 67 92
Sample Output 1

0

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

 struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};

int getNthFromLast(struct Node *head, int k){
    Node* first = head;
    Node* second = head;

    // Move first pointer k steps ahead
    for(int i = 0; i < k; i++) {
        if (first == NULL) return -1; // k is larger than the number of nodes
        first = first->next;
    }

    // Move both pointers until first reaches end
    while (first != NULL) {
        first = first->next;
        second = second->next;
    }

    return (second != NULL) ? second->data : -1;
}

int main() {
    int n,k,firstvalue,d;
    cin>>n;
    cin>>k;
    struct Node *head = NULL, *temp = NULL;
    cin>>firstvalue;
    head=new Node(firstvalue);
    temp=head;
    for(int i=1;i<n;i++){
      cin>>d;
      temp->next=new Node(d);
      temp=temp->next;
    }
    cout<<getNthFromLast(head,k);
    return 0;
}
