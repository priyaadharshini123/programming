Given an array arr of non-negative integers, return the maximum product of two numbers possible.

Example:

Input: arr[] = [1, 4, 3, 6, 7, 0] 
Output: 42
Explanation: 6 and 7 have the maximum product.
Input: arr[] = [1, 100, 42, 4, 23]
Output: 4200
Explanation:  42 and 100 have the maximum product.
Constraints:
2 ≤ arr.size ≤ 107
0 ≤ arr[i] ≤ 109

Expected Complexities
Time Complexity: O(n)
Auxiliary Space: O(1)


------------------------------------------------------------------------------------------------------------
Brute Force approach:

/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include<vector>
#include<algorithm>
#include<iomanip>
using namespace std;

int main()
{
    int n;
    
    cin>>n;
    
    vector<int>first;
    
    
    for(int i=0;i<n;i++){
        int val;
        cin>>val;
        first.push_back(val);
    }
    //sort(first.begin(),first.end());
    int max=1;
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            if(first[i]*first[j]>max){
                max=first[i]*first[j];
            }
        }
    }
    cout<<max<<" ";
   
    
    

    return 0;
}
----------------------------------------------------------------------------------------------------------
Optimized approach:

// User function template for C++
class Solution {
  public:

    int maxProduct(vector<int>& arr) {
        // code here
        int first=0,second=0;
        for(int num:arr){
            if(num>first){
                second=first;
                first=num;
            }
            else if(num>second){
                second=num;
            }
        }
        return first*second;
    }
};
