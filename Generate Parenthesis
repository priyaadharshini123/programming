Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

Input Format

n = 3

Constraints

1 <= n <= 8

Output Format

((())) (()()) (())() ()(()) ()()()


#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include<string>
using namespace std;

void generateparenthesis(int open,int close,string current,vector<string>& result){
    if(open==0 &&close==0){
        result.push_back(current);
        return;
    }
    if(open>0){
        generateparenthesis(open-1,close,current = "(",result);
    }
    if(close>open){
        generateparenthesis(open,close-1,current+")",result);
    }
}


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int n;
    cin>>n;
    vector<string> result;
    generateparenthesis(n,n,"",result);
    for(const string& s:result){
        cout<<s<<" ";
    }
    return 0;
}
