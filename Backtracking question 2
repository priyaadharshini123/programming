A happy string is a string that:

consists only of letters of the set ['a', 'b', 'c']. s[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed). For example, strings "abc", "ac", "b" and "abcbabcbcb" are all happy strings and strings "aa", "baa" and "ababbc" are not happy strings.

Given two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order.

Print the kth string of this list or print -1 if there are less than k happy strings of length n.

Input: n = 1, k = 3 Output: "c" Explanation: The list ["a", "b", "c"] contains all happy strings of length 1. The third string is "c".

Input Format

n = 1 k = 3

Constraints

1 <= n <= 10

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include<bits/stdc++.h>
using namespace std;
void generateHappy(int n,string current,vector<string>&happy){
    if(current.length()==n){
        happy.push_back(current);
        return ;
    }
    for(char ch:{'a','b','c'}){
        if(current.empty()||current.back()!=ch){
            generateHappy(n,current+ch,happy);
        }
    }
}


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int n,k;
    cin>>n>>k;
    vector<string> happystring;
    generateHappy(n,"",happystring);
    sort(happystring.begin(),happystring.end());
    if(k<=happystring.size()){
        cout<<happystring[k-1]<<endl;
    }
    else{
        cout<<-1<<endl;
    }
    return 0;
}
