Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

Only numbers 1 through 9 are used. Each number is used at most once. Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

Note: For multiple combinations, print in the next lines. When there is no combination, print -1.

Input: k = 3, n = 7 Output: [[1,2,4]] Explanation: 1 + 2 + 4 = 7 There are no other valid combinations.

Input Format

k = 3 n = 7

Constraints

2 <= k <= 9 1 <= n <= 60

Output Format

1,2,4

Sample Input 0

3
9
Sample Output 0

1,2,6
1,3,5
2,3,4


#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <bits/stdc++.h>
using namespace std;

void backtrack(int start,int k,int n,vector<int>& current,vector<vector<int>>&all){
    if(k==0&&n==0){
        all.push_back(current);
    return ;
}
if(k==0||n<=0) return;
for(int num=start;num<=9;++num){
    current.push_back(num);
    backtrack(num+1,k-1,n-num,current,all);
    current.pop_back();
}
    
}


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int k,n;
    if(!(cin>>k>>n))return 0;
    vector<vector<int>>combos;
    vector<int>path;
    backtrack(1,k,n,path,combos);
    if(combos.empty()){
        cout<<-1<<'\n';
    }else{
        for(const auto& v:combos){
            for(size_t i=0;i<v.size();++i){
                if(i)cout<<',';
                cout<<v[i];
            }
            cout<<'\n';
        }
    
    }
    return 0;
}
    

