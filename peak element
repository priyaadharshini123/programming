 peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.


 int findPeakElement(vector<int>& nums) {
        
        int n=nums.size();
        int l=0,h=n-1;

        //int n=nums.size();
        if(n==0){
            return 0;
        }
        while(l<=h){

            int mid=l+(h-l)/2;
            int i=(mid-1+n)%n;
            int j=(mid+1)%n;
            if(mid==0){
                return nums[h]>nums[l]?h:l;
            }
            if(nums[mid]>nums[i] && nums[mid]>nums[j]){
                return mid;
            }
            if(nums[mid-1]<nums[mid]){
                l=mid+1;
            }
            else{
                h=mid-1;
            }
        }
        return h;
        
    }
};
