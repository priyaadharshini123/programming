You are given a linked list where each element in the list is a node and have an integer data. You need to add 1 to the number formed by concatinating all the list node numbers together and return the head of the modified linked list.

Lets assume the node is 4->5->6 so it is 456 + 1 = 457, so 457 is the expected output.

Input Format

n = 3 -> Number of nodes LinkedList: 4 5 6

Constraints

1 <= len(list) <= 105

Output Format

457

Sample Input 0

3
4 5 6
Sample Output 0

457
Sample Input 1

1
2
Sample Output 1

3

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;
int main(){
int n;
    cin >> n;
    
    vector<int> digits(n);
    for (int i = 0; i < n; i++) {
        cin >> digits[i];
    }

    int carry = 1;  
    for (int i = n - 1; i >= 0; i--) {
        int sum = digits[i] + carry;
        digits[i] = sum % 10;
        carry = sum / 10;
    }

    if (carry) {
        cout << carry;
    }

    for (int d : digits) {
        cout << d;
    }

    cout << endl;
    return 0;
}
