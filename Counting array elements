You are given two unsorted arrays a[] and b[]. Both arrays may contain duplicate elements. For each element in a[], your task is to count how many elements in b[] are less than or equal to that element.

Examples:

Input: a[] = [4, 8, 7, 5, 1], b[] = [4, 48, 3, 0, 1, 1, 5]
Output: [5, 6, 6, 6, 3]
Explanation: 
For a[0] = 4, there are 5 elements in b (4, 3, 0, 1, 1) that are ≤ 4.
For a[1] = 8 and a[2] = 7, there are 6 elements in b that are ≤ 8 and ≤ 7.
For a[3] = 5, there are 6 elements in b that are ≤ 5.
For a[4] = 1, there are 3 elements in b (0, 1, 1) that are ≤ 1.
Input: a[] = [10, 20], b[] = [30, 40, 50]
Output: [0, 0]
Explanation: 
For a[0] = 10 and a[1] = 20, there are no elements in b that are less than or equal to 10 or 20. Hence, the output is [0, 0].
Constraints:
1 ≤ a.size(), b.size() ≤ 105
0 ≤ a[i], b[j] ≤ 105



--------------------------------------------------------------------------------------------------------------------------
Brute force approach:

/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include<vector>
using namespace std;


int main()
{
    int n;
    cin>>n;
    int m;
    cin>>m;
     vector<int>first;
     vector<int>second;
     vector<int>answer;
     for(int i=0;i<n;i++){
         int val;
         cin>>val;
         first.push_back(val);
     }
     for(int i=0;i<m;i++){
         int val1;
         cin>>val1;
         second.push_back(val1);
     }
     int count=0;
     for(int i=0;i<n;i++){
         for(int j=0;j<m;j++){
             if(second[j]<first[i]){
                 count++;
             }
         }
         answer.push_back(count);
     }
     for(int i=0;i<answer.size();i++){
         cout<<answer[i]<<" ";
     }

    return 0;
}-------------------------------------------------------------------------------------------------------------
Optimized approach:
class Solution {
  public:
    vector<int> countLessEq(vector<int>& a, vector<int>& b) {
        // code here
        int n=a.size();
        int m=b.size();
        
       vector<int> answer;
       sort(b.begin(),b.end());
       for(int i=0;i<n;i++){
           int count=upper_bound(b.begin(),b.end(),a[i])-b.begin();
           answer.push_back(count);
       }
       return answer;
       
    }
};
